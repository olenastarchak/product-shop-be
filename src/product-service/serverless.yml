service:
  name: product-service
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name
frameworkVersion: '2'

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: eu-west-1
  profile: personal

  environment:
    PG_HOST: lesson4-instance.cei7owdrptoz.eu-west-1.rds.amazonaws.com
    PG_PORT: 5432
    PG_DATABASE: postgres
    PG_USERNAME: postgres
    PG_PASSWORD: # password
    SNS_ARN:
      Ref: SNSTopic

  iamRoleStatements:
    - Effect: 'Allow'
      Action: 'sqs:*'
      Resource:
        - Fn::GetAtt: [ SQSQueue, Arn ]
    - Effect: 'Allow'
      Action: 'sns:*'
      Resource:
        Ref: SNSTopic

resources:
  Resources:
    SQSQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: catalogItemsQueue.fifo
        FifoQueue: true
        ContentBasedDeduplication: true
        ReceiveMessageWaitTimeSeconds: 20
    SNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: catalogItemsNotificationTopic
    SNSSubscriptionSuccess:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: as.sns.success@gmail.com
        Protocol: email
        FilterPolicy:
          isImportFailed: [ 'false' ]
        TopicArn:
          Ref: SNSTopic
    SNSSubscriptionFail:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: as.sns.fail@gmail.com
        Protocol: email
        FilterPolicy:
          isImportFailed: [ 'true' ]
        TopicArn:
          Ref: SNSTopic
  Outputs:
    SQSQueueUrl:
      Value:
        Ref: SQSQueue
    SQSQueueArn:
      Value:
        Fn::GetAtt: [ SQSQueue, Arn ]

functions:
  getProducts:
    handler: handler.getProducts
    events:
      - http:
          method: get
          path: products
          cors: true
  getProductById:
    handler: handler.getProductById
    events:
      - http:
          method: get
          path: products/{productId}
          cors: true
          request:
            parameters:
              paths:
                productId: true
  postProduct:
    handler: handler.postProduct
    events:
      - http:
          method: post
          path: products
          cors: true
  catalogBatchProcess:
    handler: handler.catalogBatchProcess
    events:
      - sqs:
          batchSize: 5
          arn:
            Fn::GetAtt:
              - SQSQueue
              - Arn
